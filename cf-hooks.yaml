Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: merlion-dev-cf-hook-vpc
  CFHookDemoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: merlion-dev-cf-hook-demo-lambda
      Code:
        ZipFile: |
          import boto3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info("Starting.....%s", event)

              ec2_client = boto3.client('ec2')

              try:
                  response = ec2_client.describe_instances(
                      Filters=[
                      {
                        'Name': 'instance-state-name',
                        'Values': ['running']
                      }
                  ])
                  logger.info("Received Response.", response)
          
                  return {
                      "hookStatus": "SUCCESS",
                      "errorCode": None,
                      "message": "Hook execution is successful.",
                      "clientRequestToken": event.get('clientRequestToken'),
                      "callbackContext": None,
                      "callbackDelaySeconds": 0,
                  }

              except Exception as error:
                  logger.error(error, stack_info=True, exc_info=True)
                  return {
                      "hookStatus": "FAILED",
                      "errorCode": "InternalFailure",
                      "message": "Error occurred during the hook execution.",
                      "clientRequestToken": event.get('clientRequestToken'),
                      "callbackContext": None,
                      "callbackDelaySeconds": 0,
                  }
      Runtime: python3.13
      Handler: index.lambda_handler
      Timeout: 300
      Role: !GetAtt CFHookDemoFunctionRole.Arn
  CFHookDemoFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: merlion-dev-cf-hook-demo-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ "lambda.amazonaws.com", "hooks.cloudformation.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: merlion-dev-cf-hook-demo-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:DescribeInstances"
                  - "lambda:InvokeFunction"
                Resource: [ "*" ]
  CFLambdaHookDemo:
    Type: AWS::CloudFormation::LambdaHook
    Properties:
      LambdaFunction: !Ref CFHookDemoFunction
      HookStatus: ENABLED
      TargetOperations:
        - STACK
      FailureMode: FAIL
      Alias: Private::Lambda::CFHookDemo
      ExecutionRole: !GetAtt CFHookDemoFunctionRole.Arn
      StackFilters:
        FilteringCriteria: ALL
        StackNames:
          Include:
            - !Ref AWS::StackName
      TargetFilters:
        Targets:
        - TargetName: AWS::EC2::VPC
          Action: UPDATE
          InvocationPoint: PRE_PROVISION